* =.stumpwmrc=
:PROPERTIES:
:tangle:   ~/.stumpwmrc
:END:

I'm in geeks heaven! I read my mail in emacs, I chat in emacs -- I practically /live/ in emacs. I use firefox with keysnail. And now I discovered StumpWM.

This file contains the few customizations I need right now.

To make sure the stuff I add here doesn't mess with other cl code, it
is common practice to use the =stumpwm= namespace for the
configuration.

#+BEGIN_SRC common-lisp
(in-package :stumpwm)
#+END_SRC

** use =stumptray.lisp=

#+BEGIN_SRC common-lisp
(load "/usr/local/share/stumpwm/lisp/stumptray.lisp")
(stumptray:add-mode-line-hooks)
#+END_SRC

** stumpwm window placement

#+BEGIN_SRC common-lisp
(setf *input-window-gravity* :center)
(setf *message-window-gravity* :center)
#+END_SRC

** Setup swank/slime

While using =stumpish= is ok, using slime/swank to interact with the
wm is a much more general and cleaner way.

#+BEGIN_SRC common-lisp
(ql:quickload :swank)
(defcommand swank () ()
    (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen) 
	       "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
(swank)
#+END_SRC

** Start a terminal window

=urxvtd=, the terminal emulation daemon, is started by my
=gnome-session-properties= - start a client (=urxvtc=) with the normal
terminal emulation keybindings.

#+BEGIN_SRC common-lisp 
(define-key *root-map*   (kbd "c") "run-term")
(define-key *root-map*   (kbd "C-c") "run-term")

(defcommand run-term () () 
  (run-shell-command "exec /usr/bin/urxvtc"))
#+END_SRC

** Modeline

CPU, network and date in the modeline

#+BEGIN_SRC comon-lisp
(load "/usr/local/share/stumpwm/lisp/net.lisp")
(load "/usr/local/share/stumpwm/lisp/cpu.lisp")
(setf *screen-mode-line-format*
      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " | %t | %c| %l | [^B%n^b] %W"))
#+END_SRC

Refresh the modeline at least every 5 seconds.

#+BEGIN_SRC comon-lisp
(setf *mode-line-timeout* 5)
#+END_SRC

*** Toggle the modeline

#+BEGIN_SRC common-lisp
(define-key *top-map* (kbd "H-m") "mode-line")
#+END_SRC

** Open the =stumpwm= command line

#+BEGIN_SRC common-lips
(define-key *top-map* (kbd "H-i") "colon")
#+END_SRC

** Start an emacsclient

The =emacs= daemon should be started by the
=gnome-session-properties=. Start a graphical =emacsclient= with the
standard =emacs= keybindings.

#+BEGIN_SRC common-lisp
  (define-key *root-map* (kbd "e") "run-emacs")
  (define-key *root-map* (kbd "C-e") "run-emacs")
  
  (defcommand run-emacs () ()
    (run-shell-command "exec /usr/bin/emacsclient -c"))  
#+END_SRC

** Hide the =gnome= desktop window

#+BEGIN_SRC common-lisp
  (gnewbg "Desktop")
  (define-frame-preference "Desktop"
    (0 nil nil :title "Desktop"))
#+END_SRC

** Emacs
*** Send key sequences to emacs

#+BEGIN_SRC common-lisp
  (defmacro emacs-key-sequence (keys)
    `(progn
       (emacs)
       (loop for key in ,keys do
            (send-meta-key (current-screen) (kbd key)))))
#+END_SRC

*** Send command/key sequences to emacs

#+BEGIN_SRC common-lisp
  (defmacro emacs-command-key-sequence (parts)
    `(progn
       (emacs)
       (loop for part in ,parts do
            (case (car part)
              (:key (send-meta-key (current-screen) (kbd (cdr part))))
              (:string (window-send-string (cdr part)))))))
#+END_SRC

*** Switch to the next tracking buffer

#+BEGIN_SRC common-lisp
  (defcommand emacs-next-tracking-buffer () ()
    (emacs-key-sequence '("C-c" "C-SPC")))
#+END_SRC

#+BEGIN_SRC common-lisp
(define-key *top-map* (kbd "H-t") "emacs-next-tracking-buffer")
#+END_SRC

*** Switch to the GNUS main buffer

#+BEGIN_SRC common-lisp
  (defcommand emacs-gnus-groups () ()
    (emacs-command-key-sequence
     '((:key . "C-x")
       (:key . "b")
       (:string . "*Group*")
       (:key . "RET"))))
#+END_SRC

#+BEGIN_SRC common-lisp
(define-key *top-map* (kbd "H-g") "emacs-gnus-groups")
#+END_SRC
